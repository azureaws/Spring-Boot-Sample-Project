stage('Increment Version and Build') {
    steps {
        script {
            def releaseType = params.releaseType
            echo "Release type is: ${releaseType}"

            // Read the base version from the environment
            def baseVersionFile = "${WORKSPACE}/${BASE_VERSION_FILE}"
            def baseVersion = env.BASE_VERSION
            echo "Base version: ${baseVersion}"

            def currentVersion = sh(script: 'xmllint --xpath "//*[local-name()=\'project\']/*[local-name()=\'version\']/text()" pom.xml', returnStdout: true).trim()
            echo "Current version: ${currentVersion}"

            // Increment the version based on the release type
            def newVersion
            if (releaseType == 'none') {
                // No increment for 'none'
                newVersion = currentVersion
            } else {
                // Increment major, minor, or patch based on the release type
                def (baseMajor, baseMinor, basePatch) = baseVersion.replaceAll(/(\d+)\.(\d+)\.(\d+)/, '$1 $2 $3').split(' ')
                def (currentMajor, currentMinor, currentPatch) = currentVersion.replaceAll(/(\d+)\.(\d+)\.(\d+)/, '$1 $2 $3').split(' ')

                if (releaseType == 'major' && currentMajor.toInteger() == baseMajor.toInteger() + 1) {
                    newVersion = "${(baseMajor.toInteger() + 1)}.0.0"
                } else if (releaseType == 'minor' && currentMinor.toInteger() == baseMinor.toInteger() + 1) {
                    newVersion = "${baseMajor}.${(baseMinor.toInteger() + 1)}.0"
                } else if (releaseType == 'patch' && currentPatch.toInteger() == basePatch.toInteger() + 1) {
                    newVersion = "${baseMajor}.${baseMinor}.${(basePatch.toInteger() + 1)}"
                } else {
                    error "Invalid release type or mismatch with base version. Stopping the pipeline."
                }
            }

            // Read and increment the build number
            def buildNumberFile = "${WORKSPACE}/buildNumber.txt"
            def buildNumber = readFile(buildNumberFile).trim()
            buildNumber = (buildNumber.toInteger() + 1).toString()
            env.BUILD_NUMBER = buildNumber

            if (releaseType != "none") {
                newVersion += "-v${buildNumber}"
                echo "New version: ${newVersion}"
            }

            // Update the base version
            env.BASE_VERSION = newVersion
            echo "Base version updated to: ${newVersion}"

            // Write the new version and updated build number back to the files
            writeFile file: "${BUILD_VERSION_FILE}", text: newVersion
            writeFile file: buildNumberFile, text: buildNumber
            echo "Build version and build number updated in ${BUILD_VERSION_FILE} and ${buildNumberFile}"

            // Compare new version with current version
            if (newVersion == currentVersion) {
                error "New version matches current version. Stopping the pipeline."
            }
        }
    }
}
