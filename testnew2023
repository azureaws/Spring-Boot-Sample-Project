pipeline {
    agent any

    environment {
        BASE_VERSION_FILE = "baseVersion.txt"
        BUILD_NUMBER_FILE = "${WORKSPACE}/buildNumber.txt"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    // Read the version from pom.xml
                    def pomVersion = sh(script: 'xmllint --xpath "//*[local-name()=\'project\']/*[local-name()=\'version\']/text()" pom.xml', returnStdout: true).trim()
                    pomVersion = pomVersion.replaceAll('-SNAPSHOT', '')
                    echo "POM version: ${pomVersion}"

                    // Check if the base version file exists
                    def baseVersionFile = "${WORKSPACE}/${BASE_VERSION_FILE}"
                    def baseVersion

                    if (!fileExists(baseVersionFile)) {
                        // For the first build, set the base version to the version in pom.xml
                        echo "Initializing base version to '${pomVersion}'..."
                        baseVersion = '1.0.0'
                    } else {
                        // For subsequent builds, read the base version from the file
                        baseVersion = readFile(baseVersionFile).trim()
                        echo "Base version read from file: ${baseVersion}"
                    }

                    // Read the build number from buildNumber.txt if it exists, else read from pom.xml
                    def buildNumber
                    if (fileExists(BUILD_NUMBER_FILE)) {
                        buildNumber = readFile(BUILD_NUMBER_FILE).trim()
                    } else {
                        buildNumber = sh(script: 'xmllint --xpath "//*[local-name()=\'project\']/*[local-name()=\'buildNumber\']/text()" pom.xml', returnStdout: true).trim()
                    }

                    // Increment the build number if the release type is 'build'
                    if (params.releaseType == 'build') {
                        buildNumber = (buildNumber.toInteger() + 1).toString()
                        echo "Incrementing build number to: ${buildNumber}"
                        writeFile file: BUILD_NUMBER_FILE, text: buildNumber
                    }

                    // Set the build number in the environment
                    env.BUILD_NUMBER = buildNumber
                    echo "Build number: ${buildNumber}"

                    // Set the base version in the environment
                    env.BASE_VERSION = baseVersion
                    echo "Base version: ${baseVersion}"

                    // Write the base version back to the file for subsequent builds
                    writeFile file: baseVersionFile, text: baseVersion
                    echo "Base version updated in ${BASE_VERSION_FILE}"
                }
            }
        }

        stage('Increment Version and Build') {
            steps {
                script {
                    def pomVersion = sh(script: 'xmllint --xpath "//*[local-name()=\'project\']/*[local-name()=\'version\']/text()" pom.xml', returnStdout: true).trim()
                    pomVersion = pomVersion.replaceAll('-SNAPSHOT', '')
                    echo "POM version: ${pomVersion}"

                      // Read the base version from the environment
                    def baseVersionFile = "${WORKSPACE}/${BASE_VERSION_FILE}"
                    def baseVersion = env.BASE_VERSION
                    echo "Base version: ${baseVersion}"

                    // Increment the version based on the release type
                    def newVersion
                    def releaseType = params.releaseType
                    echo "Release type is: ${releaseType}"

                    def buildNumberFile = "${WORKSPACE}/buildNumber.txt"

                    if (releaseType == 'build') {
                        // Append build number to the current version for 'build' release type
                        newVersion = "${pomVersion}.${env.BUILD_NUMBER}"
                        echo "New version: ${newVersion}"
                    } else if (releaseType == 'major' || releaseType == 'minor' || releaseType == 'patch') {
                        def (baseMajor, baseMinor, basePatch) = baseVersion.split('\\.')
                        def (currentMajor, currentMinor, currentPatch) = pomVersion.split('\\.')

                        if (releaseType == 'major' && currentMajor.toInteger() == baseMajor.toInteger() + 1) {
                            newVersion = "${(baseMajor.toInteger() + 1)}.0.0"
                            // Increment the base version for major release
                        } else if (releaseType == 'minor' && currentMinor.toInteger() == baseMinor.toInteger() + 1) {
                            newVersion = "${baseMajor}.${(baseMinor.toInteger() + 1)}.0"
                        } else if (releaseType == 'patch' && currentPatch.toInteger() == basePatch.toInteger() + 1) {
                            newVersion = "${baseMajor}.${baseMinor}.${(basePatch.toInteger() + 1)}"
                        } else {
                            error "Invalid release type or mismatch with base version. Stopping the pipeline."
                        }
                    } else {
                        error "Invalid release type. Stopping the pipeline."
                    }

                    // Set the base version in the environment
                    env.BASE_VERSION = newVersion
                    echo "Base version: ${baseVersion}"

                    
                    echo "Base version updated in ${BASE_VERSION_FILE}"
                    // Write newVersion to build_version.txt
                    def buildVersionFile = "${WORKSPACE}/build_version.txt"
                    writeFile file: buildVersionFile, text: newVersion
                    writeFile file: baseVersionFile, text: newVersion
                    echo "New version written to ${buildVersionFile}"
                    // Compare new version with current version
                    if (baseVersion == pomVersion) {
                        error "Base version matches current version. Stopping the pipeline."
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    def isPodmanBuildNeeded = fileExists("${WORKSPACE}/Dockerfile")
                    def newVersion = readFile("${WORKSPACE}/build_version.txt")
                    echo "Using the new version in Docker Build stage: ${newVersion}"
                    if (isPodmanBuildNeeded) {
                        echo "my docker logic"
                    }
                }
            }
        }
    }
}
