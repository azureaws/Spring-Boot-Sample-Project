pipeline {
    agent any
    tools {
        maven 'Maven 3.9.4'
        jdk 'JDK17'
    }
    environment {
        BASE_VERSION_FILE = 'baseversion.txt'
        BUILD_VERSION_FILE = 'buildversion.txt'
        BUILD_NUMBER_FILE = "${WORKSPACE}/buildNumber.txt"
        BUILD_SUCCESS_FILE = "${WORKSPACE}/buildSuccess"
        POM_VERSION_DEV_FILE = "${WORKSPACE}/pomVersionDev.txt"
        DOCKER_BUILD_SUCCESS_FILE = "${WORKSPACE}/dockerBuildSuccess" 
    }

    stages {
        stage('Maven Build') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: 'deploy_9334', passwordVariable: 'REPO_PWD', usernameVariable: 'REPO_USER')
                    ]) {
                        sh 'echo "Maven build"'
                        sh 'ls -la'
                    }
                }
            }
        }

        stage('Initialize and Increment') {
            steps {
                script {
                    def pomVersion = sh(script: 'xmllint --xpath "//*[local-name()=\'project\']/*[local-name()=\'version\']/text()" pom.xml', returnStdout: true).trim()
                    echo "POM version: ${pomVersion}"

                    def baseVersionFile = "${WORKSPACE}/${BASE_VERSION_FILE}"
                    def baseVersion
                    def branchParameter = params.BRANCH
                    echo "Branch is: ${branchParameter}"
                    def pomXmlContentdev = sh(script: "git show origin/develop:pom.xml", returnStdout: true).trim()
                    def pomVersiondev = sh(script: "echo '${pomXmlContentdev}' | grep -o '<version>.*</version>' | cut -d'>' -f2 | cut -d'<' -f1 | sed -n 2p", returnStdout: true).trim()
                    echo "POM Version develop: ${pomVersiondev}"

                    // Save pomVersiondev to file
                    writeFile file: POM_VERSION_DEV_FILE, text: pomVersiondev

                    if (!fileExists(BUILD_SUCCESS_FILE)) {
                        // Run the initial build condition only if the buildSuccess file does not exist
                        if (branchParameter in ['develop', 'testsit-1']) {
                            if (!fileExists(baseVersionFile)) {
                                if (branchParameter == 'develop' && pomVersion == '1.0.0.1') {
                                    echo "Initializing base version to '1.0.0.1' for the main branch..."
                                    baseVersion = '1.0.0.1'
                                } else if (branchParameter == 'testsit-1' && pomVersiondev == pomVersion) {
                                    echo "Initializing base version to '${pomVersion}'..."
                                    baseVersion = pomVersion
                                }
                            } else {
                                baseVersion = readFile(baseVersionFile).trim()
                                echo "Base version read from file: ${baseVersion}"
                            }

                            baseVersion = baseVersion.replaceAll('-SNAPSHOT', '')
                            echo "Base version: ${baseVersion}"

                            def (currentMajor, currentMinor, currentPatch, currentBuild) = pomVersion.split('\\.')

                            echo "Major Version: ${currentMajor}"
                            echo "Minor Version: ${currentMinor}"
                            echo "Patch Version: ${currentPatch}"
                            echo "Build Number: ${currentBuild ?: 'Not found'}"
                            def buildNumber

                            if (fileExists(BUILD_NUMBER_FILE)) {
                                buildNumber = readFile(BUILD_NUMBER_FILE).trim()
                            } else {
                                buildNumber = currentBuild
                                echo "Buildnumber:${buildNumber}"
                            }

                            env.BUILD_NUMBER = buildNumber
                            env.BASE_VERSION = baseVersion
                            echo "Base version: ${baseVersion}"

                            writeFile file: baseVersionFile, text: baseVersion
                            echo "Base version updated in ${BASE_VERSION_FILE}"

                            // Your existing logic for the initial build condition
                            def newVersion
                            def releaseType = params.releaseType
                            def branchName = params.BRANCH
                            echo "Release type is: ${releaseType}"
                            echo "Branch is: ${branchName}"
                            def (preMajor, preMinor, prePatch, present2Build) = pomVersion.split('\\.')
                            def (inibaseMajor, inibaseMinor, inibasePatch, inibaseBuild) = baseVersion.split('\\.')

                            if (releaseType == 'initialbuild' && branchName == 'develop' && (baseVersion == pomVersion && pomVersion == '1.0.0.1')) {
                                newVersion = "${preMajor}.${preMinor}.${prePatch}.${present2Build}"
                                echo "New version: ${newVersion}"
                            } else if (releaseType == 'initialbuild' && branchName == 'testsit-1' && baseVersion == pomVersion && pomVersiondev == baseVersion) {
                                newVersion = "${preMajor}.${preMinor}.${prePatch}.${present2Build}"
                                echo "New version: ${newVersion}"
                            } else {
                                error "Invalid release type or mismatch with the base version. Stopping the pipeline."
                            }

                            env.BASE_VERSION = newVersion
                            echo "Base version: ${baseVersion}"

                            def buildVersionFile = "${WORKSPACE}/build_version.txt"
                            writeFile file: buildVersionFile, text: newVersion
                            writeFile file: baseVersionFile, text: newVersion
                            echo "New version written to ${buildVersionFile}"

                            // If the build is successful, create a file indicating success
                            def buildSuccess = true  // Assuming your build success check logic here
                            if (buildSuccess) {
                                // Simulate touch command by creating an empty file
                                writeFile file: BUILD_SUCCESS_FILE, text: ''
                            } else {
                                error "Build failed. Cannot proceed with the initial build."
                            }
                        }
                    } else {
                        echo "Build success file found. Skipping the initial build."
                    }
                }
            }
        }

        stage('Increment Version based on Build Type') {
            when {
                expression {
                    // Run this stage only if the buildSuccess file exists
                    return fileExists(BUILD_SUCCESS_FILE)
                }
            }
            steps {
                script {
                    def pomVersion = sh(script: 'xmllint --xpath "//*[local-name()=\'project\']/*[local-name()=\'version\']/text()" pom.xml', returnStdout: true).trim()
                    echo "POM version: ${pomVersion}"

                    // Read the base version from the environment
                    def baseVersionFile = "${WORKSPACE}/${BASE_VERSION_FILE}"
                    def baseVersion = env.BASE_VERSION
                    echo "Base version: ${baseVersion}"

                    // Increment the version based on the build type
                    def newVersion
                    def releaseType = params.releaseType
                    echo "Release type is: ${releaseType}"

                    // Get the branch name from the choice parameter
                    def branchName = params.BRANCH
                    echo "Branch is: ${branchName}"

                    // Read the POM version from the develop branch file
                    def pomVersionDev = readFile(POM_VERSION_DEV_FILE).trim()
                    echo "POM version in develop branch: ${pomVersionDev}"

                    // Split the version string using dot as a delimiter
                    def (preMajor, preMinor, prePatch, present2Build) = pomVersion.split('\\.')
                    def (inibaseMajor, inibaseMinor, inibasePatch, inibaseBuild) = baseVersion.split('\\.')

                    if (releaseType == 'build') {
                        // Parse major, minor, patch, and build numbers from the base version
                        def baseMajor = inibaseMajor.toInteger()
                        def baseMinor = inibaseMinor.toInteger()
                        def basePatch = inibasePatch.toInteger()
                        def baseBuild = inibaseBuild.toInteger()
                        def buildNumber
                        
                    if (fileExists(BUILD_NUMBER_FILE)) {
                        buildNumber = readFile(BUILD_NUMBER_FILE).trim()
                    } else {
                        buildNumber = inibaseBuild
                        echo "Buildnumber:${buildNumber}"
                    }        
                        // Parse major, minor, patch, and build numbers from the current version
                        def currentMajor = preMajor.toInteger()
                        def currentMinor = preMinor.toInteger()
                        def currentPatch = prePatch.toInteger()
                        def currentBuild = present2Build.toInteger()
        
                        if ((currentMajor > baseMajor || currentMinor > baseMinor || currentPatch > basePatch) && present2Build.toInteger() == 1) {
                            buildNumber = '1'
                            newVersion = "${currentMajor}.${currentMinor}.${currentPatch}"
                            echo "New version: ${newVersion}"
                        } else if (currentMajor == baseMajor && currentMinor == baseMinor && currentPatch == basePatch && present2Build.toInteger() == inibaseBuild.toInteger() + 1) {
                            // Increment the build number
                            buildNumber = (baseBuild + 1).toString()
                            newVersion = "${currentMajor}.${currentMinor}.${currentPatch}"
                            echo "New version: ${newVersion}"
                        } else {
                            // Reject the build
                            error "Build rejected: Current version is less than the base version"
                        }
        
                        // Set the build number in the environment
                        env.BUILD_NUMBER = buildNumber
                        echo "Build number: ${buildNumber}"
        
                        // Append build number to the current version for 'build' release type
                        newVersion = "${newVersion}.${env.BUILD_NUMBER}"
                        echo "New version: ${newVersion}"
        
                        // Write the updated build number to the file
                        writeFile file: BUILD_NUMBER_FILE, text: buildNumber
                    } else {
                        error "Invalid release type or mismatch with the base version. Stopping the pipeline."
                    }
        
                    // Set the base version in the environment
                    env.BASE_VERSION = newVersion
                    echo "Base version: ${baseVersion}"
        
                    // Write newVersion to build_version.txt
                    def buildVersionFile = "${WORKSPACE}/build_version.txt"
                    writeFile file: buildVersionFile, text: newVersion
                    writeFile file: baseVersionFile, text: newVersion
                    echo "New version written to ${buildVersionFile}"
                   
                }
            }
        }

        stage('Docker Build') {
            when {
                expression {
                    // Only run if the Initialize stage was successful
                    return fileExists(BUILD_SUCCESS_FILE) && !fileExists(DOCKER_BUILD_SUCCESS_FILE)
                }
            }
            steps {
                script {
                    def isPodmanBuildNeeded = fileExists("${WORKSPACE}/Dockerfile")
                    def newVersion = readFile("${WORKSPACE}/build_version.txt")
                    def branchName = params.BRANCH
                    echo "Branch is: ${branchName}"
                    def MODULE = params.Module
                    echo "Module is: ${MODULE}"

                    if (branchName == 'develop') {
                        newVersion1 = "${newVersion}-SNAPSHOT"
                        DOCKER_IMAGE_FOLDER = 'snapshot'
                    } else if (branchName == 'testsit-1') {
                        newVersion1 = "${newVersion}-RELEASE"
                        DOCKER_IMAGE_FOLDER = 'release'
                    }
                    // If the build is successful, create a file indicating Docker build success
                    def dockerBuildSuccess = true  // Replace this with your actual Docker build success check logic
                    if (dockerBuildSuccess) {
                        // Simulate touch command by creating an empty file
                        writeFile file: DOCKER_BUILD_SUCCESS_FILE, text: ''
                    } else {
                        error "Docker build failed. Cannot proceed with the Docker Build."
                    }
                    def DOCKER_IMAGE_NAME = "artifactory.usps.gov/eir-9334-docker/usps/${MODULE}/${DOCKER_IMAGE_FOLDER}"
                    echo "Using the new version in Docker Build stage: ${newVersion1}"
                    if (isPodmanBuildNeeded) {
                        echo "Building Docker image with Podman..."
                        echo "DOCKER_IMAGE_NAME: ${DOCKER_IMAGE_NAME}"
                        // Set environment variables for proxy and temporary directory
                        withCredentials([usernamePassword(credentialsId: 'deploy_artifactory_9334', passwordVariable: 'ART_PASS', usernameVariable: 'ART_USER')]) {
                            withEnv(['HTTPS_PROXY=proxy.usps.gov:8080', "TMPDIR=${WORKSPACE}"]) {
                                echo " "
                                echo "##########################################################################"
                                echo "Check images before"
                                echo "##########################################################################"
                                sh 'podman images'

                                echo " "
                                echo "##########################################################################"
                                echo "Login to Artifactory"
                                echo "##########################################################################"
                                sh "podman login -u $ART_USER -p $ART_PASS artifactory.usps.gov"

                                echo " "
                                echo "##########################################################################"
                                echo "Build image"
                                echo "##########################################################################"
                                sh "podman build -t ${MODULE} . --format docker"

                                echo " "
                                echo "##########################################################################"
                                echo "Tag image"
                                echo "##########################################################################"
                                sh "podman tag ${MODULE} ${DOCKER_IMAGE_NAME}:${newVersion1}"

                                echo " "
                                echo "##########################################################################"
                                echo "Push image"
                                echo "##########################################################################"
                                sh "podman push -f v2s2 ${DOCKER_IMAGE_NAME}:${newVersion1} --format v2s2"

                                echo " "
                                echo "##########################################################################"
                                echo "Logout from Artifactory"
                                echo "##########################################################################"
                                sh 'podman logout --all'

                                echo " "
                                echo "##########################################################################"
                                echo "Images after"
                                echo "##########################################################################"
                                sh 'podman images'
                            }
                        }
                    } else {
                        echo "No Docker build needed as Dockerfile or source files haven't changed."
                    }
                }
            }
        }
    }
}
